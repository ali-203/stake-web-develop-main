{"version":3,"sources":["asset/logo.svg","utils/constants.js","components/Header.js","components/Card.js","asset/tile2.png","components/StackingCard.js","asset/tile1.png","components/DepositeCard.js","components/Dialog.js","containers/index(2).js","containers/Home.js","components/NewHeader.js","asset/votingpower_white.svg","asset/selling_votes_white.svg","asset/yieldswhite.svg","components/FeaturesCard.js","containers/Intro.js","asset/Background.svg","App.js","reportWebVitals.js","landigPage/zyflogonew.png","landigPage/pic1.png","landigPage/Untitled.png","landigPage/Header.jsx","index.js"],"names":["primaryColor","secondaryColor","borderColor","makeStyles","theme","button","background","borderRadius","fontStyle","fontFamily","fontWeight","fontSize","lineHeight","color","textTransform","maxHeight","minHeight","backgroundColor","headerBorderWeb","alignItems","justifyContent","headerBorderMob","borderBottom","bullet","display","margin","transform","title","pos","marginBottom","root","minWidth","maxWidth","border","flexWrap","spacing","withoutLabel","marginTop","textField","width","Web3","require","providers","HttpProvider","backdrop","zIndex","drawer","subTitle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Header","className","src","logo","alt","image","main_div","pic","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0882ad1e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.c3583a3b.svg\";","export const primaryColor = \"#5588CA\";\r\nexport const secondaryColor = \"#416FB3\";\r\nexport const textColor = \"#5AEB71\";\r\nexport const borderColor = \"#73C1EA\";\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport Logo from \"../asset/logo.svg\";\r\nimport MetaMask from \"../asset/meta-mask.png\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport Web3 from \"web3\";\r\nimport { primaryColor } from \"../utils/constants\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    background: primaryColor,\r\n    borderRadius: \"10px\",\r\n    fontStyle: \"normal\",\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"16px\",\r\n    lineHeight: \"20px\",\r\n    color: \"#FFFFFF\",\r\n    textTransform: \"none\",\r\n    maxHeight: \"53px\",\r\n    minHeight: \"48px\",\r\n    \"&:hover\": {\r\n      backgroundColor: primaryColor,\r\n    },\r\n    \"&:focus\": {\r\n      backgroundColor: primaryColor,\r\n    },\r\n  },\r\n  headerBorderWeb: {\r\n    // borderBottom: \"1px solid #EFF2FB\",\r\n    minHeight: \"115px\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n  headerBorderMob: {\r\n    borderBottom: \"1px solid #EFF2FB\",\r\n    minHeight: \"115px\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n}));\r\n\r\nconst Header = (props) => {\r\n  const classes = useStyles();\r\n  const [account, setAccount] = useState(null);\r\n  useEffect(() => {\r\n    // loadWeb3();\r\n    // loadBlockchainData();\r\n  }, []);\r\n  // eslint-disable-next-line\r\n  const loadBlockchainData = async () => {\r\n    const web3 = window.web3;\r\n\r\n    const accounts = await web3.eth.getAccounts();\r\n    setAccount(account && accounts[0]);\r\n    // eslint-disable-next-line\r\n    const networkId = await web3.eth.net.getId();\r\n  };\r\n  // eslint-disable-next-line\r\n  const loadWeb3 = async () => {};\r\n  // eslint-disable-next-line\r\n  const connectWithMetaMask = async () => {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n      const web3 = window.web3;\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n      console.log(\"account\", accounts);\r\n      setAccount(accounts[0]);\r\n\r\n      const networkId = await web3.eth.net.getId();\r\n      console.log(\"networkId\", networkId);\r\n      web3.eth.getBalance(accounts[0], (err, balance) => {});\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n      const web3 = window.web3;\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n      setAccount(accounts[0]);\r\n      web3.eth.getBalance(accounts[0], (err, balance) => {\r\n        console.log(\"balance:\", balance);\r\n        console.log(err);\r\n      });\r\n      const networkId = await web3.eth.net.getId();\r\n      console.log(\"networkId\", networkId);\r\n    } else {\r\n      window.alert(\r\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n      );\r\n    }\r\n  };\r\n  // stakeTokens = (amount) => {\r\n  //   this.setState({ loading: true });\r\n  //   this.state.daiToken.methods\r\n  //     .approve(this.state.tokenFarm._address, amount)\r\n  //     .send({ from: this.state.account })\r\n  //     .on(\"transactionHash\", (hash) => {\r\n  //       this.state.tokenFarm.methods\r\n  //         .stakeTokens(amount)\r\n  //         .send({ from: this.state.account })\r\n  //         .on(\"transactionHash\", (hash) => {\r\n  //           this.setState({ loading: false });\r\n  //         });\r\n  //     });\r\n  // };\r\n\r\n  // unstakeTokens = (amount) => {\r\n  //   this.setState({ loading: true });\r\n  //   this.state.tokenFarm.methods\r\n  //     .unstakeTokens()\r\n  //     .send({ from: this.state.account })\r\n  //     .on(\"transactionHash\", (hash) => {\r\n  //       this.setState({ loading: false });\r\n  //     });\r\n  // };\r\n  return (\r\n    <div>\r\n      <Grid container className={classes.headerBorderWeb}>\r\n        <Grid item style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <img\r\n            alt=\"logo\"\r\n            src={Logo}\r\n            style={{ height: \"100px\", width: \"200px\", cursor: \"pointer\" }}\r\n            onClick={() => props?.redirectToIntro()}\r\n          ></img>\r\n        </Grid>\r\n        <Grid item>\r\n          <h2 style={{ color: \"#fff\" }}>Dashboard</h2>\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <Button\r\n            onClick={() => props?.loadWeb3()}\r\n            variant=\"contained\"\r\n            className={classes.button}\r\n            startIcon={<img src={MetaMask} alt=\"metmask\" />}\r\n          >\r\n            {props?.account === null\r\n              ? \"Connect Wallet\"\r\n              : props?.account?.substring(0, 11) + \"...\"}\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { borderColor, textColor, secondaryColor } from \"../utils/constants\";\r\nimport \"./Card.css\";\r\nimport moment from \"moment\";\r\nexport default function SimpleCard(props) {\r\n  const [remaningDays, setRemaningDays] = useState(null);\r\n  const [rewardReady, setRewardReady] = useState(false);\r\n  const [accounts, setAccounts] = useState(null);\r\n  const { accountDetails } = props;\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    if (parseInt(accountDetails?.deposit_time) === 0) {\r\n    }\r\n  }, [accountDetails]);\r\n\r\n  // useEffect(() => {\r\n  //   if (accountDetails?.deposit_time) {\r\n  //     let abc = setInterval(function () {\r\n  //       counter();\r\n  //       counter2();\r\n  //     }, 1000);\r\n  //     setAccounts(abc);\r\n  //   }\r\n\r\n  //   // eslint-disable-next-line\r\n  //   counter2();\r\n  // }, [props]);\r\n  useEffect(() => {\r\n    clearInterval(accounts);\r\n    if (accountDetails?.deposit_time) {\r\n      let abc = setInterval(function () {\r\n        counter();\r\n        counter2();\r\n      }, 1000);\r\n      setAccounts(abc);\r\n    }\r\n    // eslint-disable-next-line\r\n    counter2();\r\n    counter();\r\n    // eslint-disable-next-line\r\n  }, [props?.account, props]);\r\n\r\n  const counter = () => {\r\n    accountDetails?.deposit_time &&\r\n      setRemaningDays(`${moment\r\n        .duration(\r\n          moment(\r\n            moment(\r\n              new Date(accountDetails?.deposit_time * 1000).toISOString()\r\n            ).add(7, \"days\")\r\n          ).diff(moment(new Date().toISOString()))\r\n        )\r\n        .days()}\r\n        : ${moment\r\n          .duration(\r\n            moment(\r\n              moment(\r\n                new Date(accountDetails?.deposit_time * 1000).toISOString()\r\n              ).add(7, \"days\")\r\n            ).diff(moment(new Date().toISOString()))\r\n          )\r\n          .hours()}\r\n        : ${moment\r\n          .duration(\r\n            moment(\r\n              moment(\r\n                new Date(accountDetails?.deposit_time * 1000).toISOString()\r\n              ).add(7, \"days\")\r\n            ).diff(moment(new Date().toISOString()))\r\n          )\r\n          .minutes()}\r\n        : ${moment\r\n          .duration(\r\n            moment(\r\n              moment(\r\n                new Date(accountDetails?.deposit_time * 1000).toISOString()\r\n              ).add(7, \"days\")\r\n            ).diff(moment(new Date().toISOString()))\r\n          )\r\n          .seconds()}`);\r\n  };\r\n  const counter2 = () => {\r\n    accountDetails?.deposit_time &&\r\n      setRewardReady(\r\n        moment(\r\n          moment(\r\n            new Date(accountDetails?.deposit_time * 1000).toISOString()\r\n          ).add(7, \"days\")\r\n        ).diff(moment(new Date().toISOString())) === 0\r\n          ? true\r\n          : false\r\n      );\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      className=\"ro\"\r\n      style={{\r\n        background: secondaryColor,\r\n        border: `1.5px solid ${borderColor}`,\r\n      }}\r\n    >\r\n      <CardContent>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <Typography className={classes.pos} gutterBottom>\r\n              Statistics\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} style={{ margin: \"20px 0px\" }}>\r\n            <Typography className={classes.title}>\r\n              TVL:{\" \"}\r\n              <span style={{ color: textColor }}>\r\n                $\r\n                {props?.usdRate * props?.totalStakesAmount !== 0\r\n                  ? (props?.usdRate * props?.totalStakesAmount).toFixed(3)\r\n                  : 0}\r\n              </span>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} style={{ margin: \"0px 0px 20px 0px\" }}>\r\n            <Typography className={classes.title}>\r\n              APY: <span style={{ color: textColor }}> 100%</span>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography className={classes.title}>\r\n              {\r\n                <>\r\n                  <span style={{ color: textColor }}></span>\r\n                  {/* {counter()} days left */}\r\n                  {rewardReady\r\n                    ? \"You can unstake your amount!\"\r\n                    : parseInt(accountDetails?.deposit_time) !== 0 &&\r\n                      remaningDays}\r\n                </>\r\n              }\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: \"normal\",\r\n    fontSize: \"18px\",\r\n    lineHeight: \"22px\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  pos: {\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontStyle: \"normal\",\r\n    fontSize: \"24px\",\r\n    lineHeight: \"30px\",\r\n    color: \"#FFFFFF\",\r\n    marginBottom: 12,\r\n  },\r\n});\r\n","export default __webpack_public_path__ + \"static/media/tile2.f60fc78a.png\";","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Logo from \"../asset/tile2.png\";\r\nimport {\r\n  primaryColor,\r\n  secondaryColor,\r\n  borderColor,\r\n  textColor,\r\n} from \"../utils/constants\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 280,\r\n    maxWidth: 370,\r\n    background: secondaryColor,\r\n    borderRadius: \"10px\",\r\n    border: `1.5px solid ${borderColor}`,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: \"normal\",\r\n    fontSize: \"18px\",\r\n    lineHeight: \"22px\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  pos: {\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"24px\",\r\n    lineHeight: \"30px\",\r\n    color: \"#FFFFFF\",\r\n    marginBottom: 12,\r\n  },\r\n  button: {\r\n    background: primaryColor,\r\n    borderRadius: \"10px\",\r\n    fontStyle: \"normal\",\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"16px\",\r\n    lineHeight: \"20px\",\r\n    color: \"#FFFFFF\",\r\n    textTransform: \"none\",\r\n    maxHeight: \"53px\",\r\n    minHeight: \"50px\",\r\n    minWidth: \"105px\",\r\n    \"&:hover\": {\r\n      backgroundColor: primaryColor,\r\n    },\r\n    \"&:focus\": {\r\n      backgroundColor: primaryColor,\r\n    },\r\n  },\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Grid\r\n          container\r\n          style={{\r\n            margin: \"10px 0px 5px 0px\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Grid item>\r\n            <Typography className={classes.pos} gutterBottom>\r\n              <img\r\n                alt=\"not found\"\r\n                src={Logo}\r\n                style={{ width: \"60px\", height: \"60px\", borderRadius: \"50%\" }}\r\n              ></img>\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={12} style={{ margin: \"0px 0px\" }}>\r\n            <Typography className={classes.pos} style={{ color: textColor }}>\r\n              {props?.mainAccountStake\r\n                ? props?.mainAccountStake?.toString() === \"0.000\"\r\n                  ? 0\r\n                  : props?.mainAccountStake\r\n                : 0}\r\n              {/* user stake which was 0 */}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container style={{ margin: \"0px 0px 10px 0px\" }}>\r\n          <Grid item xs={12}>\r\n            <Typography className={classes.title}>Staked ETH</Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={6}>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.button}\r\n              onClick={props.stake}\r\n            >\r\n              Stake\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.button}\r\n              onClick={props?.unStake}\r\n            >\r\n              UnStake\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/tile1.60eb24c2.png\";","import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Logo from \"../asset/tile1.png\";\r\n\r\nimport {\r\n  primaryColor,\r\n  secondaryColor,\r\n  borderColor,\r\n  textColor,\r\n} from \"../utils/constants\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 280,\r\n    maxWidth: 370,\r\n    background: secondaryColor,\r\n    borderRadius: \"10px\",\r\n    border: `1.5px solid ${borderColor}`,\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: \"normal\",\r\n    fontSize: \"18px\",\r\n    lineHeight: \"22px\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  pos: {\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"24px\",\r\n    lineHeight: \"30px\",\r\n    color: \"#FFFFFF\",\r\n    marginBottom: 12,\r\n  },\r\n  button: {\r\n    background: primaryColor,\r\n    borderRadius: \"10px\",\r\n    fontStyle: \"normal\",\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"16px\",\r\n    lineHeight: \"20px\",\r\n    color: \"#FFFFFF\",\r\n    textTransform: \"none\",\r\n    maxHeight: \"53px\",\r\n    minHeight: \"50px\",\r\n    minWidth: \"210px\",\r\n    \"&:hover\": {\r\n      backgroundColor: primaryColor,\r\n    },\r\n    \"&:focus\": {\r\n      backgroundColor: primaryColor,\r\n    },\r\n  },\r\n});\r\n\r\nexport default function SimpleCard(props) {\r\n  const classes = useStyles();\r\n  // eslint-disable-next-line\r\n  const [reward, setReward] = React.useState(props?.rewards);\r\n  useEffect(() => {\r\n    setReward(props?.rewards);\r\n    // eslint-disable-next-line\r\n  }, [props?.rewards]);\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Grid\r\n          container\r\n          style={{\r\n            margin: \"10px 0px 5px 0px\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Grid item>\r\n            <Typography className={classes.title} gutterBottom>\r\n              <img\r\n                alt=\"logo\"\r\n                src={Logo}\r\n                style={{ width: \"60px\", height: \"60px\", borderRadius: \"50%\" }}\r\n              ></img>\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={12} style={{ margin: \"0px 0px\" }}>\r\n            <Typography className={classes.pos} style={{ color: textColor }}>\r\n              {reward ? (reward?.toString() === \"0.000\" ? 0 : reward) : 0}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container style={{ margin: \"0px 0px 10px 0px\" }}>\r\n          <Grid item xs={12}>\r\n            <Typography className={classes.title}>Earned zYF</Typography>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Grid item xs={12}>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.button}\r\n              onClick={props?.withdraw}\r\n            >\r\n              Harvest\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nexport default function AlertDialog(props) {\r\n  const classes = useStyles();\r\n  const [amount, setAmount] = useState(0);\r\n  const handleClose = () => {\r\n    props?.handleClose(false);\r\n  };\r\n  const handleChange = (e) => {\r\n    setAmount(e.target.value);\r\n    console.log(e.target.value);\r\n  };\r\n  const handleConfirm = (e) => {\r\n    props?.setEnteredAmount(amount);\r\n    props?.confirm(amount);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={props?.open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          {\"Enter Stake Amount\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <FormControl\r\n              fullWidth\r\n              className={classes.margin}\r\n              variant=\"outlined\"\r\n            >\r\n              <InputLabel\r\n                htmlFor=\"outlined-adornment-amount\"\r\n                style={{ fontFamily: \" Arial, Helvetica, sans-serif\" }}\r\n              >\r\n                Amount\r\n              </InputLabel>\r\n              <OutlinedInput\r\n                id=\"outlined-adornment-amount\"\r\n                value={props?.amount}\r\n                onChange={handleChange}\r\n                labelWidth={60}\r\n                type=\"number\"\r\n              />\r\n            </FormControl>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={handleClose}\r\n            color=\"primary\"\r\n            style={{\r\n              fontFamily: \" Arial, Helvetica, sans-serif\",\r\n            }}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleConfirm}\r\n            color=\"primary\"\r\n            autoFocus\r\n            style={{ fontFamily: \" Arial, Helvetica, sans-serif\" }}\r\n          >\r\n            Confirm\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  withoutLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  textField: {\r\n    width: \"25ch\",\r\n  },\r\n}));\r\n","const Web3 = require(\"web3\");\r\n// const express = require(\"express\");\r\n// const app = express();\r\nlet web3 = new Web3(\r\n  new Web3.providers.HttpProvider(\r\n    \"https://ropsten.infura.io/v3/32e8833d78054890b364106c5b759454\"\r\n  )\r\n);\r\nconst contractAddress = \"0xc51C8935b9662eBA3730Dac28d9e27Eb9e5e2eA7\"; // Deployed manually\r\nconst abi = [\r\n  {\r\n    inputs: [],\r\n    name: \"destroy\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"_amount\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"drainEth\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"stakeEth\",\r\n    outputs: [],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"contract ZinFinance\",\r\n        name: \"_token\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address payable\",\r\n        name: \"_admin\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"unstake\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"withdrawReward\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"_stakeholder\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"calculateDividend\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"deposit_time\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"_address\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"isStakeholder\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"_amount\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"maxPayoutOf\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    stateMutability: \"pure\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"_addr\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"rewardOfEachUser\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"payout\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"max_payout\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"stakeholders\",\r\n    outputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"token\",\r\n    outputs: [\r\n      {\r\n        internalType: \"contract ZinFinance\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"totalStakes\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"userData\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"stakes\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"deposit_time\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"deposit_payouts\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\nexport async function getTVLValue() {\r\n  try {\r\n    const contract = await new web3.eth.Contract(abi, contractAddress);\r\n    let newVal = await contract.methods.totalStakes().call();\r\n\r\n    let val = parseFloat(web3.utils.fromWei(newVal, \"ether\")).toFixed(3);\r\n\r\n    return val;\r\n    // res.send({ success: false, data: contract });\r\n  } catch (error) {\r\n    console.log(error);\r\n    // res.send({ success: false, error: error });\r\n  }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Web3 from \"web3\";\r\n\r\nimport Header from \"../components/Header\";\r\nimport Card from \"../components/Card\";\r\nimport StackingCard from \"../components/StackingCard\";\r\nimport DepositeCard from \"../components/DepositeCard\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { Snackbar } from \"@material-ui/core\";\r\n// eslint-disable-next-line\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"../components/Dialog\";\r\n// eslint-disable-next-line\r\nimport { tokenabi, abi } from \"./data\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { getTVLValue } from \"./index(2)\";\r\n// eslint-disable-next-line\r\nconst NumberFormat = require(\"react-number-format\");\r\n\r\nfunction AlertComponent(props) {\r\n  return <Alert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nconst Home = (props) => {\r\n  const [enteredAmount, setEnteredAmount] = useState(0);\r\n  const [rewards, setRewards] = useState(0);\r\n  const [mainAccountDetails, setMainAccountDetails] = useState(null);\r\n  const [mainAccountStake, setMainAccountStake] = useState(null);\r\n  const [message, setMessage] = useState({\r\n    show: false,\r\n    severity: \"\",\r\n    message: \"\",\r\n    title: \"\",\r\n  });\r\n  const [showTimer, setShowTimer] = useState(false);\r\n  const [dropMessage, setDropMessage] = useState(\"\");\r\n  const classes = useStyles();\r\n  const [openBackdrop, setOpenBackdrop] = React.useState(false);\r\n  const [rewardReady, setRewardReady] = useState(false);\r\n  const handleCloseBackdrop = () => {\r\n    setOpenBackdrop(false);\r\n  };\r\n  const handleToggleBackdrop = () => {\r\n    setOpenBackdrop(true);\r\n  };\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setMessage({\r\n      show: false,\r\n      severity: \"\",\r\n      message: \"\",\r\n      title: \"\",\r\n    });\r\n    //hide here\r\n  };\r\n  // usdRate\r\n  // eslint-disable-next-line\r\n  const [state, setState] = useState({\r\n    mainAccount: null,\r\n    totalZinTokens: null,\r\n    rewards: null,\r\n    stakeOf: null,\r\n  });\r\n  const [openStakeDialog, setOpenStakeDialog] = useState(false);\r\n  const handleCloseStake = () => {\r\n    setOpenStakeDialog(false);\r\n  };\r\n  const handleOpenStake = () => {\r\n    setOpenStakeDialog(true);\r\n  };\r\n  const [totalStakesAmount, setTotalStakeAmount] = useState(0);\r\n  const [account, setAccount] = useState(null);\r\n  const [usdRate, setUsdRate] = useState(null);\r\n  let rev = null;\r\n  // eslint-disable-next-line\r\n  useEffect(async () => {\r\n    await axios\r\n      .get(\r\n        \"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,IOT&tsyms=USD\"\r\n      )\r\n      .then((res) => {\r\n        const cryptos = res.data;\r\n        console.log(cryptos[\"ETH\"].USD);\r\n        setUsdRate(cryptos[\"ETH\"].USD);\r\n      });\r\n  }, []);\r\n  // \"0x1806D174f365a31a3A9705d60bdd7D4522bD16EC\"\r\n  // eslint-disable-next-line\r\n  const [contractAddress, setContractAddress] = useState(\r\n    // \"0xafb8Dea6b90ac3b494406F2a1c8aa867283a66E2\"\r\n    \"0xafb8Dea6b90ac3b494406F2a1c8aa867283a66E2\"\r\n  );\r\n  // eslint-disable-next-line\r\n  const [tokenAddress, setTokenAddress] = useState(\r\n    \"0x56B6dB07880276F8D7E259d070b0429De5483D55\"\r\n  );\r\n\r\n  const loadWeb3 = async () => {\r\n    let isConnected = false;\r\n    try {\r\n      if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        await window.ethereum.enable();\r\n\r\n        isConnected = true;\r\n      } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n        isConnected = true;\r\n      } else {\r\n        isConnected = false;\r\n        let obj = {\r\n          show: true,\r\n          severity: \"error\",\r\n          message:\r\n            \"Metamask is not installed, please install it on your browser to connect.\",\r\n        };\r\n        setMessage(obj);\r\n        //  showAlert(\r\n        //   \"Whoops...\",\r\n        //   \"<p className='txtAlert'>Metamask is not installed, please install it on your browser to connect.</p><a target='_blank' href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en'>https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en</a>\"\r\n        // );\r\n      }\r\n      if (isConnected === true) {\r\n        const web3 = window.web3;\r\n        let contract = new web3.eth.Contract(abi, contractAddress);\r\n        let accounts = await getAccounts();\r\n        setAccount(accounts[0]);\r\n\r\n        setState({\r\n          mainAccount: accounts[0],\r\n        });\r\n\r\n        let accountDetails = null;\r\n        window.ethereum.on(\"accountsChanged\", function (accounts) {\r\n          clearInterval(rev);\r\n          setAccount(accounts[0]);\r\n          getUpdateAccount(accounts);\r\n          console.log(accounts);\r\n          localStorage.setItem(\"load\", accounts[0]);\r\n        });\r\n        accountDetails = await contract.methods.userData(accounts[0]).call();\r\n        setMainAccountDetails(accountDetails);\r\n\r\n        setMainAccountStake(\r\n          parseFloat(\r\n            web3.utils.fromWei(accountDetails.stakes, \"ether\")\r\n          ).toFixed(3)\r\n        );\r\n\r\n        accountDetails?.deposit_time &&\r\n          setRewardReady(\r\n            moment(\r\n              moment(\r\n                new Date(accountDetails?.deposit_time * 1000).toISOString()\r\n              ).add(7, \"days\")\r\n            ).diff(moment(new Date().toISOString())) === 0\r\n              ? true\r\n              : false\r\n          );\r\n        await getRewardOnInterval(contract, accounts[0]);\r\n        return parseFloat(accountDetails.stakes).toFixed(3);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      let obj = {\r\n        show: true,\r\n        severity: \"error\",\r\n        message: \"Error while connecting metamask\",\r\n        title: \"Connecting Metamask\",\r\n      };\r\n      setMessage(obj);\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (\r\n  //     localStorage.getItem(\"load\") !== null &&\r\n  //     localStorage.getItem(\"load\") !== undefined\r\n  //   ) {\r\n  //     window.location.reload();\r\n\r\n  //     loadWeb3();\r\n  //   }\r\n  // }, [localStorage.getItem(\"load\")]);\r\n  // useEffect(() => {\r\n  //   if (\r\n  //     localStorage.getItem(\"load\") !== null &&\r\n  //     localStorage.getItem(\"load\") !== undefined\r\n  //   ) {\r\n  //     loadWeb3();\r\n  //     localStorage.removeItem(\"load\");\r\n  //   }\r\n  //   console.log(\" localStorage.getItem() \", localStorage.getItem(\"load\"));\r\n  // }, []);\r\n  const getUpdateAccount = async (accounts) => {\r\n    const web3 = window.web3;\r\n    let contract = new web3.eth.Contract(abi, contractAddress);\r\n    let accountDetails = await contract.methods.userData(accounts[0]).call();\r\n    setMainAccountDetails(accountDetails);\r\n\r\n    setMainAccountStake(\r\n      parseFloat(web3.utils.fromWei(accountDetails.stakes, \"ether\")).toFixed(3)\r\n    );\r\n\r\n    accountDetails?.deposit_time &&\r\n      setRewardReady(\r\n        moment(\r\n          moment(\r\n            new Date(accountDetails?.deposit_time * 1000).toISOString()\r\n          ).add(7, \"days\")\r\n        ).diff(moment(new Date().toISOString())) === 0\r\n          ? true\r\n          : false\r\n      );\r\n    await getRewardOnInterval(contract, accounts[0]);\r\n  };\r\n  const getAccounts = async () => {\r\n    const web3 = window.web3;\r\n    try {\r\n      let accounts = await web3.eth.getAccounts();\r\n      console.log(accounts);\r\n      return accounts;\r\n    } catch (error) {\r\n      console.log(\"Error while fetching acounts: \", error);\r\n      return null;\r\n    }\r\n  };\r\n  // eslint-disable-next-line\r\n  const isLockedAccount = async () => {\r\n    try {\r\n      let accounts = await getAccounts();\r\n      if (accounts.length > 0) {\r\n        console.log(\"Metamask is unlocked\");\r\n      } else {\r\n        console.log(\"Metamask is locked\");\r\n      }\r\n    } catch (error) {\r\n      alert(\"Error while checking locked account\");\r\n    }\r\n  };\r\n  // eslint-disable-next-line\r\n  const getBalanceOfAccount = async () => {\r\n    const mainAccount = await getAccounts();\r\n    const web3 = window.web3;\r\n    web3.eth.getBalance(mainAccount[0], function (err, res) {\r\n      console.log(\"Resp: \", res);\r\n    });\r\n  };\r\n  // eslint-disable-next-line\r\n  const getZinTokens = async (address) => {\r\n    //   console.log(\"Account: \", address);\r\n    //   const web3 = window.web3;\r\n    //   let tokenContract = new web3.eth.Contract(tokenabi, tokenAddress);\r\n    //   // let tokens = await tokenContract.methods.balanceOf(address).call();\r\n    //   return tokens;\r\n  };\r\n  // eslint-disable-next-line\r\n  const getStakeOf = async (contract, address) => {\r\n    try {\r\n      let stake = await contract.methods.stakeOf(address).call();\r\n      return stake;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  };\r\n  const getUserData = async () => {\r\n    const web3 = window.web3;\r\n    console.log(abi, contractAddress);\r\n    let contract = new web3.eth.Contract(abi, contractAddress);\r\n    let accountDetails = null;\r\n\r\n    accountDetails = await contract.methods.userData(account).call();\r\n    let amount = accountDetails.stakes;\r\n    console.log(parseFloat(accountDetails.stakes).toFixed(3));\r\n    console.log(amount);\r\n    setMainAccountStake(\r\n      parseFloat(web3.utils.fromWei(accountDetails.stakes, \"ether\")).toFixed(3)\r\n    );\r\n    return parseFloat(accountDetails.stakes).toFixed(3);\r\n  };\r\n\r\n  const stakeZin = async (amount) => {\r\n    console.log(\"\");\r\n    if (amount < 1) {\r\n      let obj = {\r\n        show: true,\r\n        severity: \"error\",\r\n        message: \"A minimum of 1 eth is required to participate!\",\r\n        title: \"Stake\",\r\n      };\r\n      setMessage(obj);\r\n      //\r\n    } else {\r\n      if (account === null) {\r\n        //  showAlert(\"Whoops...\", \"Metamask is not connected.\");\r\n        let obj2 = {\r\n          show: true,\r\n          severity: \"error\",\r\n          message: \"Whoops..., Metamask is not connected.\",\r\n          title: \"Stake\",\r\n        };\r\n        setMessage(obj2);\r\n      } else {\r\n        let stakeAmount = await getUserData();\r\n        handleCloseStake();\r\n        if (!(stakeAmount < 1)) {\r\n          let obj = {\r\n            show: true,\r\n            severity: \"info\",\r\n            message: \"You have already stake\",\r\n            title: \"Stake\",\r\n          };\r\n          setMessage(obj);\r\n        } else {\r\n          const web3 = window.web3;\r\n\r\n          let _amount = amount.toString();\r\n          let contract = new web3.eth.Contract(abi, contractAddress);\r\n          console.log(\"web=======\", web3.utils.toWei(_amount, \"ether\"));\r\n          try {\r\n            contract.methods\r\n              .stakeEth()\r\n              .send({\r\n                from: account,\r\n                value: web3.utils.toWei(_amount, \"ether\"),\r\n              })\r\n              .on(\"transactionHash\", async (hash) => {\r\n                let obj = {\r\n                  show: true,\r\n                  severity: \"info\",\r\n                  message: \"Your transaction is pending\",\r\n                  title: \"Stake\",\r\n                };\r\n                setMessage(obj);\r\n                handleToggleBackdrop();\r\n                setDropMessage(\"Your transaction is pending\");\r\n              })\r\n              .on(\"receipt\", async (receipt) => {\r\n                let obj = {\r\n                  show: true,\r\n                  severity: \"info\",\r\n                  message: \"Your transaction is confirmed\",\r\n                  title: \"Stake\",\r\n                };\r\n                handleCloseBackdrop();\r\n                setMessage(obj);\r\n                stakeAmount = await getUserData();\r\n              })\r\n              .on(\"error\", async (error) => {\r\n                console.log(\"error\", error);\r\n                let obj = {\r\n                  show: true,\r\n                  severity: \"error\",\r\n                  message: \"User denied transaction\",\r\n                  title: \"\",\r\n                };\r\n                setMessage(obj);\r\n                handleCloseBackdrop();\r\n                setDropMessage(\"Your transaction is pending\");\r\n              });\r\n          } catch (e) {\r\n            console.log(\"error rejection\", e);\r\n            let obj = {\r\n              show: true,\r\n              severity: \"error\",\r\n              message: \"User has declined transaction\",\r\n              title: \"Stake\",\r\n            };\r\n            setMessage(obj);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const unStakeZin = async () => {\r\n    // let _amount = amount.toString();\r\n    // you have nothing staked\r\n    if (account === null) {\r\n      let obj2 = {\r\n        show: true,\r\n        severity: \"error\",\r\n        message: \"Whoops..., Metamask is not connected.\",\r\n        title: \"Stake\",\r\n      };\r\n      setMessage(obj2);\r\n    } else {\r\n      let stakeAmount = await getUserData();\r\n      if (stakeAmount > 0 && rewardReady) {\r\n        const web3 = window.web3;\r\n\r\n        let contract = new web3.eth.Contract(abi, contractAddress);\r\n        contract.methods\r\n          .unstake()\r\n          .send({ from: account })\r\n          .on(\"transactionHash\", async (hash) => {\r\n            let obj = {\r\n              show: true,\r\n              severity: \"info\",\r\n              message: \"Your transaction is pending\",\r\n              title: \"Stake\",\r\n            };\r\n            setMessage(obj);\r\n            handleToggleBackdrop();\r\n            setDropMessage(\"Your transaction is pending\");\r\n          })\r\n          .on(\"receipt\", async (receipt) => {\r\n            console.log(\"recept\", receipt);\r\n            handleCloseBackdrop();\r\n            setDropMessage(\"\");\r\n            stakeAmount = await getUserData();\r\n          })\r\n          .on(\"error\", async (error) => {\r\n            console.log(\"error\", error);\r\n            let obj = {\r\n              show: true,\r\n              severity: \"error\",\r\n              message: \"User denied transaction\",\r\n              title: \"\",\r\n            };\r\n            setMessage(obj);\r\n            handleCloseBackdrop();\r\n            setDropMessage(\"\");\r\n          });\r\n      } else {\r\n        console.log(stakeAmount);\r\n        let obj = {\r\n          show: true,\r\n          severity: \"info\",\r\n          message:\r\n            stakeAmount.toString() === \"0.000\"\r\n              ? \"You have nothing stake\"\r\n              : \"Please wait for the timer to run out before unstaking\",\r\n        };\r\n        setMessage(obj);\r\n      }\r\n    }\r\n  };\r\n\r\n  const withdraw = async () => {\r\n    //you don't have any reward\r\n\r\n    if (account === null) {\r\n      let obj2 = {\r\n        show: true,\r\n        severity: \"error\",\r\n        message: \"Whoops..., Metamask is not connected.\",\r\n        title: \"Stake\",\r\n      };\r\n      setMessage(obj2);\r\n    } else {\r\n      setShowTimer(true);\r\n\r\n      if (rewards > 0) {\r\n        try {\r\n          const web3 = window.web3;\r\n          let contract = new web3.eth.Contract(abi, contractAddress);\r\n          // eslint-disable-next-line\r\n          let rewards = await contract.methods\r\n            .withdrawReward()\r\n            .send({\r\n              from: account,\r\n            })\r\n            .on(\"transactionHash\", async (hash) => {\r\n              let obj = {\r\n                show: true,\r\n                severity: \"info\",\r\n                message: \"Your transaction is pending\",\r\n                title: \"Stake\",\r\n              };\r\n              setMessage(obj);\r\n              handleToggleBackdrop();\r\n              setDropMessage(\"Your transaction is pending\");\r\n            })\r\n            .on(\"receipt\", async (receipt) => {\r\n              console.log(\"recept\", receipt);\r\n              handleCloseBackdrop();\r\n              setDropMessage(\"\");\r\n              // eslint-disable-next-line\r\n              let stakeAmount = await getUserData();\r\n            })\r\n            .on(\"error\", async (error) => {\r\n              console.log(\"error\", error);\r\n              let obj = {\r\n                show: true,\r\n                severity: \"error\",\r\n                message: \"User denied transaction\",\r\n                title: \"\",\r\n              };\r\n              setMessage(obj);\r\n              handleCloseBackdrop();\r\n              setDropMessage(\"\");\r\n            });\r\n        } catch (error) {\r\n          let obj2 = {\r\n            show: true,\r\n            severity: \"error\",\r\n            message: \"Error in Withdraw\",\r\n            title: \"Stake\",\r\n          };\r\n          setMessage(obj2);\r\n          console.log(\"Error in Withdraw: \", error);\r\n        }\r\n      } else {\r\n        let obj2 = {\r\n          show: true,\r\n          severity: \"error\",\r\n          message: \"You don't have any reward\",\r\n          title: \"\",\r\n        };\r\n        setMessage(obj2);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getRewardOnInterval = async (contract, address) => {\r\n    if (address !== null || address !== undefined) {\r\n      try {\r\n        const web3 = window.web3;\r\n        let reward = await contract.methods.rewardOfEachUser(address).call();\r\n        console.log(\"reward\", reward);\r\n        // Earned zYF\r\n        setRewards(\r\n          parseFloat(web3.utils.fromWei(reward?.payout, \"ether\")).toFixed(3)\r\n        );\r\n        console.log(\"interval clearend\", rev);\r\n        if (rev) {\r\n          clearInterval(rev);\r\n        }\r\n        async function newF() {\r\n          let reward = await contract.methods.rewardOfEachUser(address).call();\r\n          setRewards(\r\n            parseFloat(web3.utils.fromWei(reward?.payout, \"ether\")).toFixed(3)\r\n          );\r\n          console.log(\r\n            parseFloat(web3.utils.fromWei(reward?.payout, \"ether\")).toFixed(3)\r\n          );\r\n          // setTimeout(() => {\r\n          //   newF();\r\n          //   console.log(\"check\");\r\n          // }, 4000);\r\n        }\r\n        // setTimeout(() => {\r\n        //   newF();\r\n        // }, 4000);\r\n\r\n        rev = setInterval(newF, 5000);\r\n        // console.log(\"interval clearend\", revs);\r\n\r\n        // setRev(revs);\r\n      } catch (error) {\r\n        let obj = {\r\n          show: true,\r\n          severity: \"error\",\r\n          message: \"Error while fetching rewards\",\r\n          title: \"Fetching Rewards\",\r\n        };\r\n        setMessage(obj);\r\n        console.log(\"Error while fetching rewards: \", error);\r\n      }\r\n    }\r\n  };\r\n  // eslint-disable-next-line\r\n  // const getTotalStake = async (contract) => {\r\n  //   let totalStakes = await contract.methods.totalStakes().call();\r\n  //   console.log(\"total stakes\", totalStakes);\r\n  //   return totalStakes;\r\n  // };\r\n  // eslint-disable-next-line\r\n  useEffect(async () => {\r\n    let newVal = await getTVLValue();\r\n    setTotalStakeAmount(newVal);\r\n    console.log(\"log===\", newVal);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={openStakeDialog}\r\n        confirm={stakeZin}\r\n        handleClose={handleCloseStake}\r\n        enteredAmount={enteredAmount}\r\n        setEnteredAmount={setEnteredAmount}\r\n      />\r\n      <Backdrop\r\n        className={classes.backdrop}\r\n        open={openBackdrop}\r\n        // onClick={handleCloseBackdrop}\r\n      >\r\n        <CircularProgress color=\"inherit\" />\r\n        {dropMessage}\r\n      </Backdrop>\r\n      <div\r\n        className={classes.root}\r\n        style={{ position: \"absolute\", top: \"50%\", bottom: \"50%\" }}\r\n      >\r\n        <Snackbar\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n          open={message?.show}\r\n          onClose={handleClose}\r\n          autoHideDuration={9000}\r\n        >\r\n          <AlertComponent onClose={handleClose} severity={message?.severity}>\r\n            {message?.message}\r\n          </AlertComponent>\r\n        </Snackbar>\r\n      </div>\r\n\r\n      <Header loadWeb3={loadWeb3} account={account} redirectToIntro={props?.redirectToIntro} />\r\n      <Grid container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <Grid item xs={12} xm={12} md={8} lg={6} xl={6}>\r\n          <Grid container>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginBottom: \"20px\",\r\n              }}\r\n            >\r\n              <Card\r\n                usdRate={usdRate}\r\n                accountDetails={mainAccountDetails}\r\n                showTimer={showTimer}\r\n                totalStakesAmount={totalStakesAmount}\r\n                account={account}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              xm={12}\r\n              md={8}\r\n              lg={6}\r\n              xl={6}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginBottom: \"20px\",\r\n              }}\r\n            >\r\n              <StackingCard\r\n                mainAccountStake={mainAccountStake}\r\n                accountDetails={mainAccountDetails}\r\n                stake={handleOpenStake}\r\n                unStake={unStakeZin}\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              xm={12}\r\n              md={8}\r\n              lg={6}\r\n              xl={6}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginBottom: \"20px\",\r\n              }}\r\n            >\r\n              <DepositeCard\r\n                withdraw={withdraw}\r\n                showTimer={showTimer}\r\n                rewards={rewards}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport Logo from \"../asset/logo.svg\";\r\nimport MetaMask from \"../asset/meta-mask.png\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport TelegramIcon from \"@material-ui/icons/Telegram\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport Msg from \"../asset/discord.png\";\r\n\r\nimport Web3 from \"web3\";\r\nimport { primaryColor } from \"../utils/constants\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    // background: primaryColor,\r\n    borderRadius: \"10px\",\r\n    fontStyle: \"normal\",\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"16px\",\r\n    borderRadius: \"59px\",\r\n    lineHeight: \"20px\",\r\n    color: \"#FFFFFF\",\r\n    textTransform: \"none\",\r\n    maxHeight: \"53px\",\r\n    minHeight: \"30px\",\r\n    border: \"1px solid #FFFFFF\",\r\n    backgroundImage: \"linear-gradient(to right, #338DDA, #57C8D0)\",\r\n    \"&:hover\": {\r\n      backgroundColor: primaryColor,\r\n    },\r\n    \"&:focus\": {\r\n      backgroundColor: primaryColor,\r\n    },\r\n  },\r\n  headerBorderWeb: {\r\n    // borderBottom: \"1px solid #EFF2FB\",\r\n    minHeight: \"115px\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n  headerBorderMob: {\r\n    borderBottom: \"1px solid #EFF2FB\",\r\n    minHeight: \"115px\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n}));\r\n\r\nconst Header = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div>\r\n      <Grid container className={classes.headerBorderWeb}>\r\n        <Grid item style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <img\r\n            alt=\"logo\"\r\n            src={Logo}\r\n            style={{ height: \"100px\", width: \"200px\" }}\r\n          ></img>\r\n        </Grid>\r\n        <Grid item>\r\n          <Grid\r\n            container\r\n            spacing={2}\r\n            style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n          >\r\n            <Grid item xs={4} md={1}>\r\n              <a href=\"https://www.telegram.com\" target=\"_blank\">\r\n                <TelegramIcon style={{ color: \"#ffff\", fontSize: \"28px\" }} />\r\n              </a>\r\n            </Grid>\r\n\r\n            <Grid item xs={4} md={1}>\r\n              <a href=\"https://www.facebook.com\" target=\"_blank\">\r\n                {/* <ChatIcon style={{ color: \"#ffff\", fontSize: \"28px\" }} /> */}\r\n                <img src={Msg} style={{ height: \"28px\", width: \"28px\" }} />\r\n              </a>\r\n            </Grid>\r\n            <Grid item xs={4} md={1}>\r\n              <a href=\"https://www.twitter.com\" target=\"_blank\">\r\n                <TwitterIcon style={{ color: \"#ffff\", fontSize: \"28px\" }} />\r\n              </a>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <Button\r\n            onClick={() => props?.redirectToHome()}\r\n            variant=\"contained\"\r\n            className={classes.button}\r\n          >\r\n            Staking Dashboard\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export default __webpack_public_path__ + \"static/media/votingpower_white.9d4c9c04.svg\";","export default __webpack_public_path__ + \"static/media/selling_votes_white.89c03327.svg\";","export default __webpack_public_path__ + \"static/media/yieldswhite.4f3bdb2f.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport { borderColor, textColor, secondaryColor } from \"../utils/constants\";\r\nimport \"./Card.css\";\r\nimport moment from \"moment\";\r\nimport votingpower from \"../asset/votingpower_white.svg\";\r\nimport sellingVotes from \"../asset/selling_votes_white.svg\";\r\nimport yieldsWhite from \"../asset/yieldswhite.svg\";\r\nimport { primaryColor } from \"../utils/constants\";\r\nexport default function SimpleCard(props) {\r\n  const [remaningDays, setRemaningDays] = useState(null);\r\n  const [rewardReady, setRewardReady] = useState(false);\r\n  const [accounts, setAccounts] = useState(null);\r\n  const { accountDetails } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card\r\n      style={{\r\n        width: \"100%\",\r\n        background: \"rgb(255,255,255,0.3)\",\r\n        border: `1.5px solid ${borderColor}`,\r\n      }}\r\n    >\r\n      <CardContent>\r\n        <Grid container style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <Grid xs={11}>\r\n            <Grid\r\n              container\r\n              spacing={2}\r\n              style={{ display: \"flex\", justifyContent: \"center\" }}\r\n            >\r\n              <Grid item xs={12}>\r\n                <Typography className={classes.pos} gutterBottom>\r\n                  zYF Advantages\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item sm={12} md={4} style={{ margin: \"0px 0px 20px 0px\" }}>\r\n                <Grid\r\n                  xs={12}\r\n                  style={{\r\n                    minHeight: \"200px\",\r\n                    backgroundImage: `url(${votingpower})`,\r\n                    backgroundRepeat: \"no-repeat\",\r\n                    backgroundSize: \"150% 150%\",\r\n                    backgroundPosition: \"center\",\r\n                  }}\r\n                ></Grid>\r\n                <Grid xs={12}>\r\n                  <Typography className={classes.title}>\r\n                    Accumulate Voting Power{\" \"}\r\n                  </Typography>\r\n                  <Typography className={classes.subTitle}>\r\n                    Quickly Accumulate Whale voting power.Flash loans for votes.\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item sm={12} md={4} style={{ margin: \"0px 0px 20px 0px\" }}>\r\n                <Grid\r\n                  xs={12}\r\n                  style={{\r\n                    minHeight: \"200px\",\r\n                    backgroundImage: `url(${sellingVotes})`,\r\n                    backgroundRepeat: \"no-repeat\",\r\n                    backgroundSize: \"60% 60%\",\r\n                    backgroundPosition: \"center\",\r\n                  }}\r\n                ></Grid>\r\n                <Grid xs={12}>\r\n                  <Typography className={classes.title}>\r\n                    Sell Your Votes\r\n                  </Typography>\r\n                  <Typography className={classes.subTitle}>\r\n                    Don't care about a particular motion? Sell Your votes and\r\n                    access new income.\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item sm={12} md={4}>\r\n                <Grid\r\n                  xs={12}\r\n                  style={{\r\n                    minHeight: \"200px\",\r\n                    backgroundImage: `url(${yieldsWhite})`,\r\n                    backgroundRepeat: \"no-repeat\",\r\n                    backgroundSize: \"60% 60%\",\r\n                    backgroundPosition: \"center\",\r\n                  }}\r\n                ></Grid>\r\n                <Grid xs={12}>\r\n                  <Typography className={classes.title}>\r\n                    Increase Stacking Yields\r\n                  </Typography>\r\n                  <Typography className={classes.subTitle}>\r\n                    Increase Yield on governance tokens and access their\r\n                    untapped value.\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <a\r\n                  href=\"https://litepaper.com/\"\r\n                  target=\"_blank\"\r\n                  style={{\r\n                    textDecoration: \"none\",\r\n                  }}\r\n                >\r\n                  <Button variant=\"contained\" className={classes.button}>\r\n                    Lite Paper\r\n                  </Button>\r\n                </a>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: \"normal\",\r\n    fontSize: \"18px\",\r\n    lineHeight: \"22px\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  subTitle: {\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: \"normal\",\r\n    fontSize: \"16px\",\r\n    lineHeight: \"20px\",\r\n    color: \"#FFFFFF\",\r\n  },\r\n  pos: {\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontStyle: \"normal\",\r\n    fontSize: \"24px\",\r\n    lineHeight: \"30px\",\r\n    color: \"#FFFFFF\",\r\n    marginBottom: 12,\r\n  },\r\n  button: {\r\n    // background: primaryColor,\r\n    borderRadius: \"10px\",\r\n    fontStyle: \"normal\",\r\n    fontFamily: \" Arial, Helvetica, sans-serif\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"16px\",\r\n    borderRadius: \"59px\",\r\n    lineHeight: \"20px\",\r\n    color: \"#FFFFFF\",\r\n    textTransform: \"none\",\r\n    maxHeight: \"53px\",\r\n    minHeight: \"30px\",\r\n    minWidth: \"200px\",\r\n    border: \"1px solid #FFFFFF\",\r\n    backgroundImage: \"linear-gradient(to right, #338DDA, #57C8D0)\",\r\n    \"&:hover\": {\r\n      backgroundColor: primaryColor,\r\n    },\r\n    \"&:focus\": {\r\n      backgroundColor: primaryColor,\r\n    },\r\n  },\r\n});\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Web3 from \"web3\";\r\n\r\nimport Header from \"../components/NewHeader\";\r\nimport Card from \"../components/FeaturesCard\";\r\nimport StackingCard from \"../components/StackingCard\";\r\nimport DepositeCard from \"../components/DepositeCard\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { Snackbar } from \"@material-ui/core\";\r\n// eslint-disable-next-line\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"../components/Dialog\";\r\n// eslint-disable-next-line\r\nimport { tokenabi, abi } from \"./data\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport { getTVLValue } from \"./index(2)\";\r\n// eslint-disable-next-line\r\nconst NumberFormat = require(\"react-number-format\");\r\n\r\nfunction AlertComponent(props) {\r\n  return <Alert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    color: \"#fff\",\r\n  },\r\n}));\r\n\r\nconst Intro = ({ redirectToHome }) => {\r\n  const [enteredAmount, setEnteredAmount] = useState(0);\r\n  const [rewards, setRewards] = useState(0);\r\n  const [mainAccountDetails, setMainAccountDetails] = useState(null);\r\n  const [mainAccountStake, setMainAccountStake] = useState(null);\r\n  const [message, setMessage] = useState({\r\n    show: false,\r\n    severity: \"\",\r\n    message: \"\",\r\n    title: \"\",\r\n  });\r\n  const [showTimer, setShowTimer] = useState(false);\r\n  const [dropMessage, setDropMessage] = useState(\"\");\r\n  const classes = useStyles();\r\n  const [openBackdrop, setOpenBackdrop] = React.useState(false);\r\n  const [rewardReady, setRewardReady] = useState(false);\r\n  const handleCloseBackdrop = () => {\r\n    setOpenBackdrop(false);\r\n  };\r\n  const handleToggleBackdrop = () => {\r\n    setOpenBackdrop(true);\r\n  };\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setMessage({\r\n      show: false,\r\n      severity: \"\",\r\n      message: \"\",\r\n      title: \"\",\r\n    });\r\n    //hide here\r\n  };\r\n  // usdRate\r\n  // eslint-disable-next-line\r\n  const [state, setState] = useState({\r\n    mainAccount: null,\r\n    totalZinTokens: null,\r\n    rewards: null,\r\n    stakeOf: null,\r\n  });\r\n  const [openStakeDialog, setOpenStakeDialog] = useState(false);\r\n  const handleCloseStake = () => {\r\n    setOpenStakeDialog(false);\r\n  };\r\n  const handleOpenStake = () => {\r\n    setOpenStakeDialog(true);\r\n  };\r\n  const [totalStakesAmount, setTotalStakeAmount] = useState(0);\r\n  const [account, setAccount] = useState(null);\r\n  const [usdRate, setUsdRate] = useState(null);\r\n  let rev = null;\r\n  // eslint-disable-next-line\r\n  useEffect(async () => {\r\n    await axios\r\n      .get(\r\n        \"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,IOT&tsyms=USD\"\r\n      )\r\n      .then((res) => {\r\n        const cryptos = res.data;\r\n        console.log(cryptos[\"ETH\"].USD);\r\n        setUsdRate(cryptos[\"ETH\"].USD);\r\n      });\r\n  }, []);\r\n  // \"0x1806D174f365a31a3A9705d60bdd7D4522bD16EC\"\r\n  // eslint-disable-next-line\r\n  const [contractAddress, setContractAddress] = useState(\r\n    \"0x0DE97C875dd68d8A269cfb7Ec9D5c4c544751979\"\r\n  );\r\n  // eslint-disable-next-line\r\n  const [tokenAddress, setTokenAddress] = useState(\r\n    \"0x56B6dB07880276F8D7E259d070b0429De5483D55\"\r\n  );\r\n\r\n  const loadWeb3 = async () => {\r\n    let isConnected = false;\r\n    try {\r\n      if (window.ethereum) {\r\n        window.web3 = new Web3(window.ethereum);\r\n        await window.ethereum.enable();\r\n\r\n        isConnected = true;\r\n      } else if (window.web3) {\r\n        window.web3 = new Web3(window.web3.currentProvider);\r\n        isConnected = true;\r\n      } else {\r\n        isConnected = false;\r\n        let obj = {\r\n          show: true,\r\n          severity: \"error\",\r\n          message:\r\n            \"Metamask is not installed, please install it on your browser to connect.\",\r\n        };\r\n        setMessage(obj);\r\n        //  showAlert(\r\n        //   \"Whoops...\",\r\n        //   \"<p className='txtAlert'>Metamask is not installed, please install it on your browser to connect.</p><a target='_blank' href='https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en'>https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en</a>\"\r\n        // );\r\n      }\r\n      if (isConnected === true) {\r\n        const web3 = window.web3;\r\n        let contract = new web3.eth.Contract(abi, contractAddress);\r\n        let accounts = await getAccounts();\r\n        setAccount(accounts[0]);\r\n\r\n        setState({\r\n          mainAccount: accounts[0],\r\n        });\r\n\r\n        let accountDetails = null;\r\n        window.ethereum.on(\"accountsChanged\", function (accounts) {\r\n          clearInterval(rev);\r\n          setAccount(accounts[0]);\r\n          getUpdateAccount(accounts);\r\n          console.log(accounts);\r\n          localStorage.setItem(\"load\", accounts[0]);\r\n        });\r\n        accountDetails = await contract.methods.userData(accounts[0]).call();\r\n        setMainAccountDetails(accountDetails);\r\n\r\n        setMainAccountStake(\r\n          parseFloat(\r\n            web3.utils.fromWei(accountDetails.stakes, \"ether\")\r\n          ).toFixed(3)\r\n        );\r\n\r\n        accountDetails?.deposit_time &&\r\n          setRewardReady(\r\n            moment(\r\n              moment(\r\n                new Date(accountDetails?.deposit_time * 1000).toISOString()\r\n              ).add(7, \"days\")\r\n            ).diff(moment(new Date().toISOString())) === 0\r\n              ? true\r\n              : false\r\n          );\r\n        await getRewardOnInterval(contract, accounts[0]);\r\n        return parseFloat(accountDetails.stakes).toFixed(3);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      let obj = {\r\n        show: true,\r\n        severity: \"error\",\r\n        message: \"Error while connecting metamask\",\r\n        title: \"Connecting Metamask\",\r\n      };\r\n      setMessage(obj);\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (\r\n  //     localStorage.getItem(\"load\") !== null &&\r\n  //     localStorage.getItem(\"load\") !== undefined\r\n  //   ) {\r\n  //     window.location.reload();\r\n\r\n  //     loadWeb3();\r\n  //   }\r\n  // }, [localStorage.getItem(\"load\")]);\r\n  // useEffect(() => {\r\n  //   if (\r\n  //     localStorage.getItem(\"load\") !== null &&\r\n  //     localStorage.getItem(\"load\") !== undefined\r\n  //   ) {\r\n  //     loadWeb3();\r\n  //     localStorage.removeItem(\"load\");\r\n  //   }\r\n  //   console.log(\" localStorage.getItem() \", localStorage.getItem(\"load\"));\r\n  // }, []);\r\n  const getUpdateAccount = async (accounts) => {\r\n    const web3 = window.web3;\r\n    let contract = new web3.eth.Contract(abi, contractAddress);\r\n    let accountDetails = await contract.methods.userData(accounts[0]).call();\r\n    setMainAccountDetails(accountDetails);\r\n\r\n    setMainAccountStake(\r\n      parseFloat(web3.utils.fromWei(accountDetails.stakes, \"ether\")).toFixed(3)\r\n    );\r\n\r\n    accountDetails?.deposit_time &&\r\n      setRewardReady(\r\n        moment(\r\n          moment(\r\n            new Date(accountDetails?.deposit_time * 1000).toISOString()\r\n          ).add(7, \"days\")\r\n        ).diff(moment(new Date().toISOString())) === 0\r\n          ? true\r\n          : false\r\n      );\r\n    await getRewardOnInterval(contract, accounts[0]);\r\n  };\r\n  const getAccounts = async () => {\r\n    const web3 = window.web3;\r\n    try {\r\n      let accounts = await web3.eth.getAccounts();\r\n      console.log(accounts);\r\n      return accounts;\r\n    } catch (error) {\r\n      console.log(\"Error while fetching acounts: \", error);\r\n      return null;\r\n    }\r\n  };\r\n  // eslint-disable-next-line\r\n  const isLockedAccount = async () => {\r\n    try {\r\n      let accounts = await getAccounts();\r\n      if (accounts.length > 0) {\r\n        console.log(\"Metamask is unlocked\");\r\n      } else {\r\n        console.log(\"Metamask is locked\");\r\n      }\r\n    } catch (error) {\r\n      alert(\"Error while checking locked account\");\r\n    }\r\n  };\r\n  // eslint-disable-next-line\r\n  const getBalanceOfAccount = async () => {\r\n    const mainAccount = await getAccounts();\r\n    const web3 = window.web3;\r\n    web3.eth.getBalance(mainAccount[0], function (err, res) {\r\n      console.log(\"Resp: \", res);\r\n    });\r\n  };\r\n  // eslint-disable-next-line\r\n  const getZinTokens = async (address) => {\r\n    //   console.log(\"Account: \", address);\r\n    //   const web3 = window.web3;\r\n    //   let tokenContract = new web3.eth.Contract(tokenabi, tokenAddress);\r\n    //   // let tokens = await tokenContract.methods.balanceOf(address).call();\r\n    //   return tokens;\r\n  };\r\n  // eslint-disable-next-line\r\n  const getStakeOf = async (contract, address) => {\r\n    try {\r\n      let stake = await contract.methods.stakeOf(address).call();\r\n      return stake;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  };\r\n  const getUserData = async () => {\r\n    const web3 = window.web3;\r\n    console.log(abi, contractAddress);\r\n    let contract = new web3.eth.Contract(abi, contractAddress);\r\n    let accountDetails = null;\r\n\r\n    accountDetails = await contract.methods.userData(account).call();\r\n    let amount = accountDetails.stakes;\r\n    console.log(parseFloat(accountDetails.stakes).toFixed(3));\r\n    console.log(amount);\r\n    setMainAccountStake(\r\n      parseFloat(web3.utils.fromWei(accountDetails.stakes, \"ether\")).toFixed(3)\r\n    );\r\n    return parseFloat(accountDetails.stakes).toFixed(3);\r\n  };\r\n\r\n  const stakeZin = async (amount) => {\r\n    console.log(\"\");\r\n    if (amount < 1) {\r\n      let obj = {\r\n        show: true,\r\n        severity: \"error\",\r\n        message: \"A minimum of 1 eth is required to participate!\",\r\n        title: \"Stake\",\r\n      };\r\n      setMessage(obj);\r\n      //\r\n    } else {\r\n      if (account === null) {\r\n        //  showAlert(\"Whoops...\", \"Metamask is not connected.\");\r\n        let obj2 = {\r\n          show: true,\r\n          severity: \"error\",\r\n          message: \"Whoops..., Metamask is not connected.\",\r\n          title: \"Stake\",\r\n        };\r\n        setMessage(obj2);\r\n      } else {\r\n        let stakeAmount = await getUserData();\r\n        handleCloseStake();\r\n        if (!(stakeAmount < 1)) {\r\n          let obj = {\r\n            show: true,\r\n            severity: \"info\",\r\n            message: \"You have already stake\",\r\n            title: \"Stake\",\r\n          };\r\n          setMessage(obj);\r\n        } else {\r\n          const web3 = window.web3;\r\n\r\n          let _amount = amount.toString();\r\n          let contract = new web3.eth.Contract(abi, contractAddress);\r\n          console.log(\"web=======\", web3.utils.toWei(_amount, \"ether\"));\r\n          try {\r\n            contract.methods\r\n              .stakeEth()\r\n              .send({\r\n                from: account,\r\n                value: web3.utils.toWei(_amount, \"ether\"),\r\n              })\r\n              .on(\"transactionHash\", async (hash) => {\r\n                let obj = {\r\n                  show: true,\r\n                  severity: \"info\",\r\n                  message: \"Your transaction is pending\",\r\n                  title: \"Stake\",\r\n                };\r\n                setMessage(obj);\r\n                handleToggleBackdrop();\r\n                setDropMessage(\"Your transaction is pending\");\r\n              })\r\n              .on(\"receipt\", async (receipt) => {\r\n                let obj = {\r\n                  show: true,\r\n                  severity: \"info\",\r\n                  message: \"Your transaction is confirmed\",\r\n                  title: \"Stake\",\r\n                };\r\n                handleCloseBackdrop();\r\n                setMessage(obj);\r\n                stakeAmount = await getUserData();\r\n              })\r\n              .on(\"error\", async (error) => {\r\n                console.log(\"error\", error);\r\n                let obj = {\r\n                  show: true,\r\n                  severity: \"error\",\r\n                  message: \"User denied transaction\",\r\n                  title: \"\",\r\n                };\r\n                setMessage(obj);\r\n                handleCloseBackdrop();\r\n                setDropMessage(\"Your transaction is pending\");\r\n              });\r\n          } catch (e) {\r\n            console.log(\"error rejection\", e);\r\n            let obj = {\r\n              show: true,\r\n              severity: \"error\",\r\n              message: \"User has declined transaction\",\r\n              title: \"Stake\",\r\n            };\r\n            setMessage(obj);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const unStakeZin = async () => {\r\n    // let _amount = amount.toString();\r\n    // you have nothing staked\r\n    if (account === null) {\r\n      let obj2 = {\r\n        show: true,\r\n        severity: \"error\",\r\n        message: \"Whoops..., Metamask is not connected.\",\r\n        title: \"Stake\",\r\n      };\r\n      setMessage(obj2);\r\n    } else {\r\n      let stakeAmount = await getUserData();\r\n      if (stakeAmount > 0 && rewardReady) {\r\n        const web3 = window.web3;\r\n\r\n        let contract = new web3.eth.Contract(abi, contractAddress);\r\n        contract.methods\r\n          .unstake()\r\n          .send({ from: account })\r\n          .on(\"transactionHash\", async (hash) => {\r\n            let obj = {\r\n              show: true,\r\n              severity: \"info\",\r\n              message: \"Your transaction is pending\",\r\n              title: \"Stake\",\r\n            };\r\n            setMessage(obj);\r\n            handleToggleBackdrop();\r\n            setDropMessage(\"Your transaction is pending\");\r\n          })\r\n          .on(\"receipt\", async (receipt) => {\r\n            console.log(\"recept\", receipt);\r\n            handleCloseBackdrop();\r\n            setDropMessage(\"\");\r\n            stakeAmount = await getUserData();\r\n          })\r\n          .on(\"error\", async (error) => {\r\n            console.log(\"error\", error);\r\n            let obj = {\r\n              show: true,\r\n              severity: \"error\",\r\n              message: \"User denied transaction\",\r\n              title: \"\",\r\n            };\r\n            setMessage(obj);\r\n            handleCloseBackdrop();\r\n            setDropMessage(\"\");\r\n          });\r\n      } else {\r\n        console.log(stakeAmount);\r\n        let obj = {\r\n          show: true,\r\n          severity: \"info\",\r\n          message:\r\n            stakeAmount.toString() === \"0.000\"\r\n              ? \"You have nothing stake\"\r\n              : \"Please wait for the timer to run out before unstaking\",\r\n        };\r\n        setMessage(obj);\r\n      }\r\n    }\r\n  };\r\n\r\n  const withdraw = async () => {\r\n    //you don't have any reward\r\n\r\n    if (account === null) {\r\n      let obj2 = {\r\n        show: true,\r\n        severity: \"error\",\r\n        message: \"Whoops..., Metamask is not connected.\",\r\n        title: \"Stake\",\r\n      };\r\n      setMessage(obj2);\r\n    } else {\r\n      setShowTimer(true);\r\n\r\n      if (rewards > 0) {\r\n        try {\r\n          const web3 = window.web3;\r\n          let contract = new web3.eth.Contract(abi, contractAddress);\r\n          // eslint-disable-next-line\r\n          let rewards = await contract.methods\r\n            .withdrawReward()\r\n            .send({\r\n              from: account,\r\n            })\r\n            .on(\"transactionHash\", async (hash) => {\r\n              let obj = {\r\n                show: true,\r\n                severity: \"info\",\r\n                message: \"Your transaction is pending\",\r\n                title: \"Stake\",\r\n              };\r\n              setMessage(obj);\r\n              handleToggleBackdrop();\r\n              setDropMessage(\"Your transaction is pending\");\r\n            })\r\n            .on(\"receipt\", async (receipt) => {\r\n              console.log(\"recept\", receipt);\r\n              handleCloseBackdrop();\r\n              setDropMessage(\"\");\r\n              // eslint-disable-next-line\r\n              let stakeAmount = await getUserData();\r\n            })\r\n            .on(\"error\", async (error) => {\r\n              console.log(\"error\", error);\r\n              let obj = {\r\n                show: true,\r\n                severity: \"error\",\r\n                message: \"User denied transaction\",\r\n                title: \"\",\r\n              };\r\n              setMessage(obj);\r\n              handleCloseBackdrop();\r\n              setDropMessage(\"\");\r\n            });\r\n        } catch (error) {\r\n          let obj2 = {\r\n            show: true,\r\n            severity: \"error\",\r\n            message: \"Error in Withdraw\",\r\n            title: \"Stake\",\r\n          };\r\n          setMessage(obj2);\r\n          console.log(\"Error in Withdraw: \", error);\r\n        }\r\n      } else {\r\n        let obj2 = {\r\n          show: true,\r\n          severity: \"error\",\r\n          message: \"You don't have any reward\",\r\n          title: \"\",\r\n        };\r\n        setMessage(obj2);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getRewardOnInterval = async (contract, address) => {\r\n    if (address !== null || address !== undefined) {\r\n      try {\r\n        const web3 = window.web3;\r\n        let reward = await contract.methods.rewardOfEachUser(address).call();\r\n        console.log(\"reward\", reward);\r\n        // Earned zYF\r\n        setRewards(\r\n          parseFloat(web3.utils.fromWei(reward?.payout, \"ether\")).toFixed(3)\r\n        );\r\n        console.log(\"interval clearend\", rev);\r\n        if (rev) {\r\n          clearInterval(rev);\r\n        }\r\n        async function newF() {\r\n          let reward = await contract.methods.rewardOfEachUser(address).call();\r\n          setRewards(\r\n            parseFloat(web3.utils.fromWei(reward?.payout, \"ether\")).toFixed(3)\r\n          );\r\n          console.log(\r\n            parseFloat(web3.utils.fromWei(reward?.payout, \"ether\")).toFixed(3)\r\n          );\r\n          // setTimeout(() => {\r\n          //   newF();\r\n          //   console.log(\"check\");\r\n          // }, 4000);\r\n        }\r\n        // setTimeout(() => {\r\n        //   newF();\r\n        // }, 4000);\r\n\r\n        rev = setInterval(newF, 5000);\r\n        // console.log(\"interval clearend\", revs);\r\n\r\n        // setRev(revs);\r\n      } catch (error) {\r\n        let obj = {\r\n          show: true,\r\n          severity: \"error\",\r\n          message: \"Error while fetching rewards\",\r\n          title: \"Fetching Rewards\",\r\n        };\r\n        setMessage(obj);\r\n        console.log(\"Error while fetching rewards: \", error);\r\n      }\r\n    }\r\n  };\r\n  // eslint-disable-next-line\r\n  // const getTotalStake = async (contract) => {\r\n  //   let totalStakes = await contract.methods.totalStakes().call();\r\n  //   console.log(\"total stakes\", totalStakes);\r\n  //   return totalStakes;\r\n  // };\r\n  // eslint-disable-next-line\r\n  useEffect(async () => {\r\n    let newVal = await getTVLValue();\r\n    setTotalStakeAmount(newVal);\r\n    console.log(\"log===\", newVal);\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={openStakeDialog}\r\n        confirm={stakeZin}\r\n        handleClose={handleCloseStake}\r\n        enteredAmount={enteredAmount}\r\n        setEnteredAmount={setEnteredAmount}\r\n      />\r\n      <Backdrop\r\n        className={classes.backdrop}\r\n        open={openBackdrop}\r\n        // onClick={handleCloseBackdrop}\r\n      >\r\n        <CircularProgress color=\"inherit\" />\r\n        {dropMessage}\r\n      </Backdrop>\r\n      <div\r\n        className={classes.root}\r\n        style={{ position: \"absolute\", top: \"50%\", bottom: \"50%\" }}\r\n      >\r\n        <Snackbar\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n          open={message?.show}\r\n          onClose={handleClose}\r\n          autoHideDuration={9000}\r\n        >\r\n          <AlertComponent onClose={handleClose} severity={message?.severity}>\r\n            {message?.message}\r\n          </AlertComponent>\r\n        </Snackbar>\r\n      </div>\r\n\r\n      <Header redirectToHome={redirectToHome} />\r\n      <Grid\r\n        container\r\n        style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"40px\",paddingBottom:\"40px\" }}\r\n      >\r\n        <Grid item xs={12} xm={12} md={12} lg={12} xl={12}>\r\n          <Grid container>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"20px\",\r\n              }}\r\n            >\r\n              <Card\r\n                usdRate={usdRate}\r\n                accountDetails={mainAccountDetails}\r\n                showTimer={showTimer}\r\n                totalStakesAmount={totalStakesAmount}\r\n                account={account}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Intro;\r\n","export default __webpack_public_path__ + \"static/media/Background.40a4a19a.svg\";","import React, { useState } from \"react\";\r\nimport Home from \"./containers/Home\";\r\nimport Intro from \"./containers/Intro\";\r\nimport \"./App.css\";\r\nimport Background from \"./asset/Background.svg\";\r\n\r\nfunction App() {\r\n  const [goToHome, setGoToHome] = useState(false);\r\n\r\n  console.log(goToHome, \"goToHome===============\");\r\n  const redirectToHome = () => {\r\n    setGoToHome(true);\r\n  };\r\n  const redirectToIntro = () => {\r\n    setGoToHome(false);\r\n  };\r\n  \r\n  return (\r\n    <div\r\n      className=\"App\"\r\n      style={{\r\n        background: `url(${Background})`,\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundSize: \"cover\",\r\n      }}\r\n    >\r\n      {/* <Home /> */}\r\n      {goToHome ? <Home redirectToIntro={redirectToIntro}/> : <Intro redirectToHome={redirectToHome} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export default __webpack_public_path__ + \"static/media/zyflogonew.f856898c.png\";","export default __webpack_public_path__ + \"static/media/pic1.c16d9951.png\";","export default __webpack_public_path__ + \"static/media/Untitled.c5972959.png\";","import React from 'react'\r\nimport logo from \"./zyflogonew.png\";\r\nimport image from \"./pic1.png\";\r\nimport pic from \"./Untitled.png\";\r\nimport NearMeIcon from '@material-ui/icons/NearMe';\r\nimport ArrowRightAltIcon from '@material-ui/icons/ArrowRightAlt';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport ModeCommentIcon from '@material-ui/icons/ModeComment';\r\nimport \"./LandingPage.css\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n        <div className=\"container\">\r\n            <div className=\"logo-div\">\r\n  <span className=\"logo-img\">\r\n<img src={logo} alt=\"logo\" width=\"60px\" />\r\n  </span>\r\n  <span className=\"logo-txt\">\r\nzYF Protocol\r\n  </span>\r\n            </div>\r\n            <div className=\"text_blog\">\r\n                 <span className=\"blog_text\">\r\n                   Blog\r\n                 </span>\r\n                 <span className=\"launch_app\">\r\n                   LaunchApp \r\n                 </span>\r\n                 <ArrowRightAltIcon className=\"arrow_icon\"/>\r\n            </div>\r\n        </div>\r\n        <div className=\"decentr_lized\">\r\n        <div className=\"banertxt-div\">\r\n        <h1>Decentralized<br/> Seigniorage Insurance<br/> Protocol</h1>\r\n        \r\n            <p className=\"para_div\">\r\n                Protect your Seigniorage assets the risk of not returning to peg\r\n                (with a specific time period or ever). Get paid providing liquidity to the zYF insurance fund.\r\n            </p>\r\n            </div>\r\n            <div className=\"image\">\r\n        <img src={image} alt=\"pic\" width=\"350px\" />\r\n        </div>\r\n        </div>\r\n        <div className=\"button\">\r\n        <button className=\"launch_text\">Launch App</button>\r\n        <button className=\"lite_paper\">Litepaper</button>\r\n        </div>\r\n        <div className=\"join\">\r\n        <p>\r\n        join our community!\r\n        </p>\r\n        </div>\r\n\r\n        <div>\r\n        <ModeCommentIcon />\r\n       <NearMeIcon />\r\n       </div>\r\n\r\n\r\n        <div main_div>\r\n        <div className=\"protocol\">\r\n        <h2>What is zYF Protocol?</h2>\r\n        <h3>Insurance on coupons</h3>\r\n        <p>Lorem ipsum dolor sit amet,consectetur adipiscing elit,sed do eiusmod tempor<br/>\r\n        incididunt ut labore et dolore manage alique. Ut enim ad minim veniam,quis nostrud<br/>\r\n        exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\r\n        </div>\r\n        <div className=\"pegging\">\r\n            <h2>Insurance on un-pegging</h2>\r\n            <p>Lorem ipsum dolor sit amet,consectetur adipiscing elit,sed do eiusmod tempor<br/>\r\n        incididunt ut labore et dolore manage alique. Ut enim ad minim veniam,quis nostrud\r\n        exercitation</p>\r\n        </div>\r\n        <img src={pic} alt=\"img\" width=\"100px\" />\r\n\r\n        <button className=\"read_blog\">Read our blog</button>\r\n        </div>\r\n        <footer className=\"foot_div\">\r\n           <p> zYF Protocol © 2021</p>\r\n           <p>App Lite paper Blog</p>\r\n           <TwitterIcon />\r\n           <ModeCommentIcon />\r\n\r\n           <NearMeIcon />\r\n        </footer>\r\n\r\n        \r\n\r\n\r\n\r\n</div>\r\n        \r\n       \r\n        \r\n        \r\n       \r\n\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Header from \"../src/landigPage/Header\"\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Header />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}